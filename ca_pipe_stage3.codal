#include "ca_defines.hcodal"
#include "opcodes.hcodal"
#include "config.hcodal"
#include "debug.hcodal"




event ex : pipeline(pipe.EX)
{
    use ex_output;
    semantics
    {


        uint32  base_address;
        uint2  base_offset;
          uint3  byte_count;
          uint3  request_cmd;
        switch (r_exmem_alu_ops)
              {


                                //Arithmetic
                                case ALU_ADD:
                                    s_ex_alu_output = r_idex_SrcA + r_idex_SrcB;
                                    break;

                                case ALU_SUB:
                                     s_ex_alu_output = r_idex_SrcA - r_idex_SrcB;
                                     break;

                                 case ALU_MUL:
                                      s_ex_alu_output = r_idex_SrcA * r_idex_SrcB;
                                      break;
                                    // Nop
                                  case ALU_NOP:
                                        s_ex_alu_output = 0;
                                        break;
                                   //Logic
                                  case ALU_AND:
                                        s_ex_alu_output = r_idex_SrcA & r_idex_SrcB;
                                        break;
                                  case ALU_NEG:
                                        s_ex_alu_output = ~r_idex_SrcB;
                                         break;
                                  case ALU_OR:
                                      s_ex_alu_output = r_idex_SrcA | r_idex_SrcB;
                                      break;
                                  case ALU_XOR:
                                      s_ex_alu_output = r_idex_SrcA ^ r_idex_SrcB;
                                      break;
                                  // Shift instructions
                                   case ALU_SLL:
                                      s_ex_alu_output = r_idex_SrcA << (uint5)r_idex_SrcB;
                                      break;
                                    case ALU_SRL:
                                      s_ex_alu_output = r_idex_SrcA >> (uint5)r_idex_SrcB;
                                       break;
                                     case ALU_SRA:
                                       s_ex_alu_output = r_idex_SrcA >> (uint5)r_idex_SrcB;
                                        break;
                                     case ALU_EQ:
                                         s_ex_alu_output = r_idex_SrcA == r_idex_SrcB;
                                         s_ex_zero_out = 1;
                                        break;
                                      case ALU_NEQ:
                                         s_ex_alu_output = r_idex_SrcA != r_idex_SrcB;
                                         break;
                                      case ALU_ULT:
                                          s_ex_alu_output = r_idex_SrcA < r_idex_SrcB;
                                          break;
                                        case ALU_ULE:
                                           s_ex_alu_output = r_idex_SrcA <= r_idex_SrcB;
                                          break;
                                        case ALU_SLT:
                                            s_ex_alu_output = (int32)r_idex_SrcA < (int32)r_idex_SrcB;
                                            break;

                                        case ALU_SLE:
                                            s_ex_alu_output = (int32)r_idex_SrcA <= (int32)r_idex_SrcB;
                                            break;
                                        case ALU_UGTE:
                                            s_ex_alu_output = r_idex_SrcA >= r_idex_SrcB;
                                            break;
                                          case ALU_SGTE:
                                             s_ex_alu_output = (int32)r_idex_SrcA >= (int32)r_idex_SrcB;
                                             break;
                                          case ALU_LUI:
                                             s_ex_alu_output = (r_idex_SrcB) << 12;
                                             break;
                                          case ALU_AUIPC:
                                             s_ex_alu_output = (r_idex_SrcB) << 12;
                                             break;
                                          case ALU_MOV:
                                             s_ex_alu_output = (r_idex_SrcB);
                                             break;

                                default:
                                    s_ex_alu_output = 0;
                                    break;


              }



        // -----------------------------------------------------------------------------------------
        // Memory request parameters
        // -----------------------------------------------------------------------------------------

        // Memory interface supports aligned access
        base_address = s_ex_alu_output & BUS_MASK;
        base_offset = s_ex_alu_output & ~BUS_MASK;


        switch (r_exmem_memop)
        {
            case MEM_NOP:
                request_cmd = CP_CMD_NONE;
                byte_count = 0;
                break;
                // load byte
            case MEM_LB:
                request_cmd = CP_CMD_READ;
                byte_count = 1;
                break;
            case MEM_LH:
                request_cmd = CP_CMD_READ;
                byte_count = 2;
                break;
            case MEM_LW:
                request_cmd = CP_CMD_READ;
                byte_count = 4;
                break;
            case MEM_LBU:
                request_cmd = CP_CMD_READ;
                byte_count = 1;
                break;
            case MEM_LHU:
                request_cmd = CP_CMD_READ;
                byte_count = 2;
                break;



            case MEM_SW:
                request_cmd = CP_CMD_WRITE;
                byte_count = 4;
                break;

            case MEM_SH:
                request_cmd = CP_CMD_WRITE;
                byte_count = 2;
                break;

            case MEM_SB:
                request_cmd = CP_CMD_WRITE;
                byte_count = 1;
                break;

            default:
                request_cmd = CP_CMD_NONE;
                byte_count = 0;
                break;
        }

        // -----------------------------------------------------------------------------------------
        // Memory request
        // -----------------------------------------------------------------------------------------

        // Load
        if (request_cmd == CP_CMD_READ)
        {
        if_data.request(CP_CMD_READ, base_address, base_offset, byte_count);



        }


        s_ex_stall = 0;
        s_wb_stall = 0;
        s_mem_stall = 0;


        // End of program execution
        if (s_id_opc == OPC_HALT)
        {
            codasip_halt();
          //  codasip_info(INFO_GENERAL, "Halt: return value = %d\n", rf_gpr[GPR_RETVAL] & 0xFF);
            //codasip_store_exit_code(rf_xpr[RET_REG] & 0xFF);
        }

    };
    timing
       {
           ex_output();
       };


};



event ex_output : pipeline(pipe.EX)
{
    semantics
    {



        r_exmem_MemtoReg = r_idex_MemtoReg;
        r_exmem_alu_output = s_ex_alu_output;

        r_exmem_Branch = r_idex_Branch;


        r_exmem_Branch_Target_Address = r_exmem_alu_output;

        r_exmem_JUMB_Target_Address = r_exmem_pc + r_exmem_simm;

        r_exmem_pc =  r_idex_pc;
        PCSrc = r_exmem_alu_output & r_memwb_Branch;

  //  r_exmem_JUMB_Target_Address = r_exmem_alu_output;


//passing
/////////////////////////////////////////////////
        r_exmem_rd_index = r_idex_rd_index;
        r_exmem_rs1_index = r_idex_rs1_index;
        r_exmem_rs2_index = r_idex_rs2_index;

        r_exmem_alu_ops = r_idex_alu_ops;
        r_exmem_simm = r_idex_simm;

        r_exmem_jump = r_idex_jump;
        r_exmem_ALUSrc1 = r_idex_ALUSrc1;
        r_exmem_ALUSrc2 = r_idex_ALUSrc2;

        r_exmem_SrcA = r_idex_SrcA;
        r_exmem_SrcB = r_idex_SrcB;

        r_exmem_memop = r_idex_memop;

        r_exmem_pipe_mux = r_idex_pipe_mux;



        r_exmem_RegWrite = r_idex_RegWrite;
//////////////////////////////////        ///////////////////////

        r_exmem_rs2_value = r_idex_rs2_value;
        r_exmem_rs1_value = r_idex_rs1_value;

        r_exmem_zero_out = s_ex_zero_out;


        r_ex_PCSrc = PCSrc;
    };
};



